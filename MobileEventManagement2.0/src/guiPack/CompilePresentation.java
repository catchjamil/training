

package guiPack;

import java.awt.image.*;
import java.io.*;
import java.awt.*;
import JavaLib.*;
import com.sun.image.codec.jpeg.*;
import javax.swing.*;

/**
 *
 * 
 */
public class CompilePresentation extends javax.swing.JFrame {
    public int mapCount, currentIndex;
    public String mapDescription[];
    public String lockDescription[];
    public boolean save;
    MainForm parent;
    
    /** Creates new form CompilePresentation */
    public CompilePresentation(MainForm parent) {
        this.parent = parent;
        
        initComponents();
        
        Dimension sd  = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth()/ 2, sd.height / 2 - this.getHeight()/ 2);
        
        jComboNoOfSlides.removeAllItems();
        for(int i=1;i<20;i++) {
            jComboNoOfSlides.addItem("" + i);
        }
        
        mapCount = 1;
        currentIndex = 0;
        mapDescription = new String[mapCount*80];
        lockDescription = new String[mapCount];
        for(int i=0;i<(mapCount*80);i++) {
            mapDescription[i] = "0";
        }
        for(int i=0;i<mapCount;i++) {
            lockDescription[i] = "0"; // unlocked...
        }
        
        save = false;

        String welcomeScreenPath = parent.mps.presentationFolderPath + "\\about.jpg";
        try {
            if(new File(welcomeScreenPath).exists()) {
                jLabelCurrentWelcome.setIcon(new ImageIcon(parent.mps.presentationFolderPath + "\\about.jpg"));
            }
        }catch(Exception e) {
            System.out.println("Error Loading Welcome Screen: " + e);
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        new LoadForm();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboNoOfSlides = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabelCurrentWelcome = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PRESENTATION BUILDER ");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        new LoadForm();

        jButton2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton2.setText("S T A R T");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        new LoadForm();

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SPECIFY TOTAL SLIDES");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jComboNoOfSlides.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboNoOfSlides.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboNoOfSlidesItemStateChanged(evt);
            }
        });
        jComboNoOfSlides.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboNoOfSlidesActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setText("CLEAR HISTORY");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButton4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .add(jComboNoOfSlides, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jComboNoOfSlides, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jButton4)
                .add(18, 18, 18)
                .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jButton1)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        new LoadForm();

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText(" Current Welcome Screen");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelCurrentWelcome.setBackground(new java.awt.Color(204, 204, 204));
        jLabelCurrentWelcome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgPack/default_base_200.JPG"))); // NOI18N
        jScrollPane1.setViewportView(jLabelCurrentWelcome);

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("C H A N G E");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jButton3)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboNoOfSlidesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboNoOfSlidesItemStateChanged
// TODO add your handling code here:
        
        mapDescription = new String[mapCount*80];
        for(int i=0;i<(mapCount*80);i++)
            mapDescription[i] = "0";
    }//GEN-LAST:event_jComboNoOfSlidesItemStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
        for(int i=0;i<mapCount*80;i++) {
            mapDescription[i] = "0";
        }
        new MessageBox(this,"Map Descriptor Cleared!").setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
        String fname;
        FileDialog fd = new FileDialog(this,"Select Image",FileDialog.LOAD);
        fd.setVisible(true);
        if(fd.getFile() == null)
            return;
        fname = fd.getDirectory() + fd.getFile();
        
        try
        {
            Image image = Toolkit.getDefaultToolkit().getImage(fname);
            MediaTracker mediaTracker = new MediaTracker(new Container());
            mediaTracker.addImage(image, 0);
            mediaTracker.waitForID(0);
            System.out.println("Input Image Read!");
            int thumbWidth = 200;
            int thumbHeight = 200;
            
            // draw original image to thumbnail image object and
            // scale it to the new size on-the-fly
            BufferedImage thumbImage = new BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);
            Graphics2D graphics2D = thumbImage.createGraphics();
            graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);

            // save thumbnail image to OUTFILE
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(parent.mps.presentationFolderPath + "\\about.jpg"));
            JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
            JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(thumbImage);
            param.setQuality(1.0f, false);
            encoder.setJPEGEncodeParam(param);
            encoder.encode(thumbImage);
            out.close(); 
            ImageIcon ii1 = new ImageIcon(thumbImage);
            jLabelCurrentWelcome.setIcon(ii1);
            new MessageBox(this,"New Welcome Screen Set").setVisible(true);
        }catch(Exception e) {
            new MessageBox(this,"Error Setting Welcome Screen").setVisible(true);
            System.out.println("Some excep: " + e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:

        // deleting old images....
        for(int i=0;i<100;i++) {
            File f=  new File(parent.mps.presentationFolderPath + "\\" + i + ".jpg");
            if(f.exists()) {
                f.delete();
            }else {
                break;
            }
        }

        for(currentIndex=0;currentIndex<mapCount;currentIndex++)
        {
            SlideImageSelector ii1 = new SlideImageSelector(this,true,this,"Select Input Image # " + (currentIndex+1));
            ii1.setVisible(true);
        }
        
        // forfeit presentation...
        if(currentIndex!=mapCount)
        {
            System.out.println("Forfeit Presentation!");
            return;
        }
        
        for(currentIndex=0;currentIndex<mapCount;currentIndex++)
        {
            Mapper m = new Mapper(this,true,this,"Map Coordinates For Slide #." + (currentIndex+1));
            m.setVisible(true);
        }
        
        // forfeit presentation...
        if(currentIndex!=mapCount)
        {
            System.out.println("Forfeit Presentation!");
            return;
        }
        
        new SavePresentation(this,true,this).setVisible(true);
        
        if(save)
        {
            System.out.println("To save!");
            
            String mapDescription2[] = new String[mapCount*80];
            for(int i=0;i<mapCount*80;i++)
                mapDescription2[i] = "0";
            
            for(int start=0;start<mapCount*80;start+=80)
            {
                for(int j=start;j<((start+80)-4);j++)
                    mapDescription2[j+4] = mapDescription[j];
            }
            
            System.out.println("Map Count: " + mapCount + ", " + lockDescription.length);
            for(int i=0;i<mapCount;i++)
            {
                mapDescription2[(i*80) + 2] = lockDescription[i];
                System.out.println("Lock: " + lockDescription[i]);
            }
            
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter(parent.mps.presentationFolderPath + "\\temp.map"));
                for(int i=0;i<mapCount*80;i++) {
                    System.out.println(mapDescription2[i]);
                    bw.write(mapDescription2[i] + (char)(13) + (char)(10));
                }
                bw.close();
                System.out.println("File Written!");
            }catch(Exception e) {
                System.out.println("Some exception writing: " + e);
                return;
            }
            
            String driveLetter = parent.mps.presentationFolderPath.substring(0,1);
            System.out.println("Drive Letter: " + driveLetter);
            
            try {
                String batch = "";
                batch += driveLetter + ":" + (char)(10) + (char)(13);
                batch += "CD\\" + (char)(10) + (char)(13);
                batch += "CD \"" +  parent.mps.presentationFolderPath + "\"" + (char)(10) + (char)(13);
                batch += "\"" + parent.mps.jarPath + "\"" + " -cvfm " + parent.presentationClassName + ".jar MANIFEST.MF " + parent.presentationClassName + ".class about.jpg intro.jpg temp.map ";
                for(int i=0;i<mapCount;i++) {
                    batch += "" + i + ".jpg ";
                }
                batch += "processing" + (char)(10) + (char)(13);
                batch += "@PAUSE" + (char)(10) + (char)(13);
                
                System.out.println("Batch Code Generated\n" + batch);
                BufferedWriter bw = new BufferedWriter(new FileWriter(System.getProperty("user.dir") + "\\make.bat"));
                bw.write(batch);
                bw.close();
                System.out.println("File Written!");

                Desktop.getDesktop().open(new File(System.getProperty("user.dir") + "\\make.bat"));
            }
            catch(Exception e) {
                System.out.println("Excep: " + e);
            }
        }
        else
        {
            System.out.println("Not to save!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboNoOfSlidesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboNoOfSlidesActionPerformed
// TODO add your handling code here:
        if(jComboNoOfSlides.getItemCount() < 5)
            return;
        
        mapCount = Integer.parseInt(jComboNoOfSlides.getSelectedItem().toString());
        currentIndex = 0;
        mapDescription = new String[mapCount*80];
        lockDescription = new String[mapCount];
        for(int i=0;i<(mapCount*80);i++)
            mapDescription[i] = "0";
        for(int i=0;i<mapCount;i++)
            lockDescription[i] = "0"; //unlocked
        
        System.out.println("Map Descriptor Cleared!");
        
    }//GEN-LAST:event_jComboNoOfSlidesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        setVisible(false);
        parent.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboNoOfSlides;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelCurrentWelcome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
}
